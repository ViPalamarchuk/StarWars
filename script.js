'use strict';class MainPage {    constructor(url) {        this._htmlObj = document.createElement('table');        this._htmlObj.style.height = '100vh';        this._url = url;        this._request();        this._films = [];    }    _request() {        this._xhr = new XMLHttpRequest();        this._xhr.open('GET', this._url, true);        this._xhr.onload = this._onload.bind(this);        this._xhr.send();    }    _onload(event) {        let films = JSON.parse(this._xhr.responseText)['results'];        films.sort(function (a, b) {            return a['episode_id'] - b['episode_id']        });        for(let i in films) {            let film = new Film(films[i]);            this._addFilm(film);        }    }    _addFilm(film) {        this._films.push(film);        this._htmlObj.appendChild(film.getHTML());    }    getHTML() {        return this._htmlObj;    }}class Film {    constructor(obj) {        this._episode_id = obj['episode_id'];        this._title = obj['title'];        this._opening_crawl = obj['opening_crawl'];        this._director = obj['director'];        this._release_date = obj['release_date'];        this._createHTML();        this._characters = obj['characters'];        this._result = [];    }    _createHTML() {        this._htmlObj = document.createElement('tr');        this._htmlObj.style.fontFamily = 'regular';        this._htmlObj.style.background = 'url(https://cdn.pixabay.com/photo/2017/10/23/16/04/milky-way-2881461_960_720.jpg)';        this._htmlObj.style.color = 'white';        this._htmlObj.style.borderCollapse = 'collapse';        const keys = ['_episode_id', '_title', '_opening_crawl', '_director', '_release_date'];        for(let i in keys) {           let newTd = document.createElement('td');           newTd.innerHTML = this[keys[i]];           this._htmlObj.appendChild(newTd);        }        this._htmlObj.onclick = this._charactersShow.bind(this);    }    _charactersShow() {        for(let i in this._characters) {            let promise = this._httpGet(this._characters[i]);            promise.then(this._onCharacterLoad.bind(this), this._onCharacterLoad.bind(this));        }    }    _showModal() {        let windowCharacter = document.createElement('div');        windowCharacter.style.position = 'fixed';        windowCharacter.style.left = '0';        windowCharacter.style.top =  '0';        windowCharacter.style.width = '100%';        windowCharacter.style.height = '100%';        let content = document.createElement('div');        windowCharacter.appendChild(content);        content.style.marginTop = '5%';        content.style.marginRight = '17%';        content.style.marginLeft = '17%';        content.style.width = '70%';        content.style.height = '50%';        content.style.fontFamily = 'regular' ;        content.style.columnCount = '3';        content.style.background = 'black';        content.style.color = 'white';        let windowTable = document.createElement('table');        content.appendChild(windowTable);        for(let i in this._result) {            let windowTr = document.createElement('tr');            windowTable.appendChild(windowTr);            let windowTdName = document.createElement('td');            windowTr.appendChild(windowTdName);            windowTdName.innerHTML = this._result[i]['name'];            let windowTdGender = document.createElement('td');            windowTr.appendChild(windowTdGender);            windowTdGender.innerHTML = this._result[i]['gender'];        }        document.body.appendChild(windowCharacter);        content.onclick = function () {            document.body.removeChild(windowCharacter);        }    }    _onCharacterLoad(response) {        let name;        let gender;        if(response !== null) {            name = response['name'];            gender =  response['gender'];        }        this._result.push({            name: name,            gender: gender        });        if(this._result.length === this._characters.length) {            this._showModal();            this._result = [];        }    }    _httpGet(url) {        return new Promise(function(resolve, reject) {            let xhr = new XMLHttpRequest();            xhr.open('GET', url, true);                        xhr.onload = function () {                if(xhr.status === 200) {                    resolve(JSON.parse(xhr.responseText));                }                else {                    reject(null);                }            };            xhr.send();        }) ;    }    getHTML() {        return this._htmlObj;    }}let page = new MainPage('https://swapi.co/api/films/');document.body.appendChild((page.getHTML()));